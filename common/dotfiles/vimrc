filetype off

if has('vim_starting')
  if &compatible
    set nocompatible
  endif

  set runtimepath+=~/.vim/bundle/neobundle.vim
endif

call neobundle#begin(expand('~/.vim/bundle/'))

NeoBundleFetch 'Shougo/neobundle.vim'

" コード補完
"NeoBundle 'Shougo/neocomplete.vim'
"NeoBundle 'Shougo/neocomplcache'
"NeoBundle 'marcus/rsense'
"NeoBundle 'supermomonga/neocomplete-rsense.vim'
NeoBundle 'Townk/vim-autoclose'
NeoBundle 'tpope/vim-endwise'

" 静的解析
NeoBundle 'scrooloose/syntastic'

" ドキュメント参照
NeoBundle 'thinca/vim-ref'
NeoBundle 'yuku-t/vim-ref-ri'
NeoBundle 'szw/vim-tags'
NeoBundle 'soramugi/auto-ctags.vim'

" 非同期処理
NeoBundle 'Shougo/vimproc', {
  \   'build' : {
  \     'mac' : 'make -f make_mac.mak',
  \     'unix' : 'make -f make_unix.mak',
  \   }
  \ }

" ファイラー
NeoBundle 'Shougo/unite.vim'
NeoBundle 'Shougo/neomru.vim'
NeoBundle 'scrooloose/nerdtree'

" Git
NeoBundle 'tpope/vim-fugitive'

" Grep
NeoBundle 'grep.vim'

" Languages
NeoBundle 'mrk21/yaml-vim'
NeoBundle 'vim-ruby/vim-ruby'
NeoBundle 'slim-template/vim-slim'

call neobundle#end()

" Rubocop
""""""""""""""""
let g:syntastic_mode_map = { 'mode': 'passive', 'active_filetypes': ['ruby'] }
let g:syntastic_ruby_checkers = ['rubocop']

" Ctags
""""""""""""""""
let g:auto_ctags=1
let g:auto_ctags_directory_list = ['~/.tags']
set tags=~/.tags

" Unite
""""""""""""""""
let g:unite_enable_start_insert=1
let g:unite_source_history_yank_enable=1
let g:unite_source_file_mru_limit=200
nnoremap <silent> ,uy :<C-u>Unite history/yank<CR>
nnoremap <silent> ,ub :<C-u>Unite buffer<CR>
nnoremap <silent> ,uf :<C-u>UniteWithBufferDir -buffer-name=files file file/new<CR>
nnoremap <silent> ,ur :<C-u>Unite -buffer-name=register register<CR>
nnoremap <silent> ,uu :<C-u>Unite file_mru buffer<CR>
au FileType unite nnoremap <silent> <buffer> <expr> <C-H> unite#do_action('split')
au FileType unite inoremap <silent> <buffer> <expr> <C-H> unite#do_action('split')
au FileType unite nnoremap <silent> <buffer> <expr> <C-V> unite#do_action('vsplit')
au FileType unite inoremap <silent> <buffer> <expr> <C-V> unite#do_action('vsplit')
au FileType unite nnoremap <silent> <buffer> <ESC><ESC> :q<CR>
au FileType unite inoremap <silent> <buffer> <ESC><ESC> <ESC>:q<CR>

" NERDTree
""""""""""""""""
nnoremap <silent> ,nt :NERDTreeToggle<CR>

" Git
""""""""""""""""
" grep検索の実行後にQuickFix Listを表示
autocmd QuickFixCmdPost *grep* cwindow
" ステータス行にGitブランチを表示
set statusline+=%{fugitive#statusline()}


set encoding=utf-8

set title       "ファイル名表示
set number      "行番号表示
set ruler       "カーソルの位置を表示
set smartindent "オートインデント
set autoindent  "オートインデント
set smarttab    "高度なオートインデント
set expandtab   "TABのかわりにスペース
set ignorecase  "大文字・小文字を区別なく検索
set smartcase   "検索文字列に大文字が含まれていたら区別
set wrapscan    "最後まで検索したら最初に戻る
set incsearch   "インクリメンタルサーチ
set showmatch   "対応する括弧を強調

set cmdheight=2     "コマンドラインの行数
set laststatus=2    "ステータスラインをエディタウィンドウの末尾から2行目に常に表示
set background=dark "暗い背景色用の配色
set tabstop=2       "タブの幅
set shiftwidth=2    "自動インデントの幅
set softtabstop=2   "動く幅

set backupdir=$HOME/.vimbackup "バックアップファイルの場所
set directory=$HOME/.vimbackup "SWAPファイルの場所

set backspace=indent,eol,start

syntax enable
filetype plugin indent on

NeoBundleCheck
